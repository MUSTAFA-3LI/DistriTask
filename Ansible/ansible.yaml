- name: Setup environment on virtual machines
  hosts: all
  become: true
  tasks:
    - name: Update package list
      ansible.builtin.apt:
        update_cache: true

    - name: Install essential packages
      ansible.builtin.apt:
        name:
          - build-essential
          - curl
          - git
          - python3
          - python3-venv
          - python3-pip
          - ca-certificates
          - gnupg
          - lsb-release
          - apt-transport-https
        state: present

    - name: Download Docker installation script
      ansible.builtin.get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh
        mode: '0755'

    - name: Install Docker using official script
      ansible.builtin.shell: /tmp/get-docker.sh
      args:
        creates: /usr/bin/docker

    - name: Create docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to Docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true

    - name: Start and enable Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Reset SSH connection to apply group membership
      ansible.builtin.meta: reset_connection

    - name: Verify user is in docker group
      ansible.builtin.command: groups {{ ansible_user }}
      register: user_groups
      become: false

    - name: Display user groups
      ansible.builtin.debug:
        msg: "User {{ ansible_user }} is in groups: {{ user_groups.stdout }}"

    - name: Install Docker Compose
      ansible.builtin.apt:
        name: docker-compose-plugin
        state: present
        update_cache: true

    - name: Test Docker without sudo
      ansible.builtin.command: docker --version
      register: docker_test
      become: false
      failed_when: false

    - name: Display Docker test result
      ansible.builtin.debug:
        msg: "Docker test result: {{ docker_test.stdout if docker_test.rc == 0 else 'Failed: ' + docker_test.stderr }}"

    - name: Create application directory
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/DistriTask
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Clone repository
      ansible.builtin.git:
        repo: https://github.com/MUSTAFA-3LI/DistriTask.git
        dest: /home/{{ ansible_user }}/DistriTask
        version: main
        force: true
      become_user: "{{ ansible_user }}"

    - name: Replace docker-compose.yaml for public instances
      ansible.builtin.copy:
        src: docker-compose-public.yaml
        dest: /home/{{ ansible_user }}/DistriTask/docker-compose.yaml
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        force: true
      when: "'public' in group_names"

    - name: Replace docker-compose.yaml for private instances
      ansible.builtin.copy:
        src: docker-compose-private.yaml
        dest: /home/{{ ansible_user }}/DistriTask/docker-compose.yaml
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        force: true
      when: "'private' in group_names"

    - name: Create secure .env file
      ansible.builtin.copy:
        content: |
          DB_HOST={{ vault_db_host }}
          DB_PORT={{ vault_db_port }}
          MYSQL_DATABASE={{ vault_mysql_database }}
          MYSQL_USER={{ vault_mysql_user }}
          MYSQL_PASSWORD={{ vault_mysql_password }}
          MYSQL_ROOT_PASSWORD={{ vault_mysql_root_password }}
        dest: /home/{{ ansible_user }}/DistriTask/.env
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"


    - name: Run docker compose up with build
      ansible.builtin.shell: docker compose up -d --build
      args:
        chdir: /home/{{ ansible_user }}/DistriTask
      become: false
      register: compose_result

    - name: Display docker compose result
      ansible.builtin.debug:
        msg: "Docker Compose result: {{ compose_result.stdout }}"
