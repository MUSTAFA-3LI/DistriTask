name: CI Pipeline

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - main

jobs:
  requirements_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest Tests
          python manage.py makemigrations
          python manage.py migrate

  Docker_Setup:
    runs-on: ubuntu-latest
    needs: requirements_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        run: |
          # Remove any conflicting containerd packages
          sudo apt-get remove -y containerd.io containerd runc || true
          # Install Docker using the official convenience script
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          # Install Docker Compose
          sudo apt-get update
          sudo apt-get install -y docker-compose

  build:
    runs-on: ubuntu-latest
    needs: [requirements_tests, Docker_Setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD_FORK }}

      - name: Get latest version from Docker Hub and increment it
        id: version
        run: |
          # Fetch all tags from Docker Hub
          latest_version=$(curl -s https://hub.docker.com/v2/repositories/mustafa3li/distritask/tags | jq -r '.results[].name' | grep -E '^version_[0-9]+$' | sort -V | tail -n1)
          if [[ -z "$latest_version" ]]; then
            new_version="version_1"
          else
            current_version_number=${latest_version#version_}
            new_version="version_$(( current_version_number + 1 ))"
          fi
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "Building Docker image with tag: $new_version"

      - name: Build Docker image
        run: |
          docker build --no-cache -f Dockerfile.distritask -t mustafa3li/distritask:${{ env.NEW_VERSION }} .

      - name: Tag Docker image as latest
        run: |
          docker tag mustafa3li/distritask:${{ env.NEW_VERSION }} mustafa3li/distritask:latest

      - name: Push Docker image with both tags
        run: |
          docker push mustafa3li/distritask:${{ env.NEW_VERSION }}
          docker push mustafa3li/distritask:latest
